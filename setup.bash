#!/bin/bash
VERSION=1.0
IFS=$'\n'
BACKTITLE="Folding@home Docker, Microsoft AKS and Microsoft ACI setup - Carlos Milán Figueredo @cmilanf"
LOCATION="westeurope"

pause () {
    read -n 1 -s -r -p "Press any key to continue"
    echo ''
}

headermsg () {
	echo "Folding@home Setup script v${VERSION}"
	echo "...with GPU support via CUDA!"
	echo "Copyright (c) 2020 Carlos Milán Figueredo - MIT License"
	echo ""
}

usagemsg () {
	echo "You can use the following parameters to set script defaults:"
    echo "$0 -g <resource group name> -s <Azure subscription name or id> -l <location>"
	echo ""
}

chkbin () {
    if ! [ -x "$(command -v $1)" ]; then
	    echo "ERROR: This script requires $1 program to continue. Please install it."
	    exit 1
    fi
}

checkdeps () {
    chkbin dialog
}

docker_build () {
    clear
    chkbin docker
    HEIGHT=10
    WIDTH=75
    TITLE="Build Docker image"
    BODY="Please enter the name and tag of the Docker image to build, for instance: cmilanf/fohclient:7.5.1"
    exec 3>&1
    VALUE=$(dialog --ok-label "Build" \
	  --backtitle "$BACKTITLE" \
	  --title "$TITLE" \
	  --form "$BODY" \
        $HEIGHT $WIDTH 0 \
	    "Docker image name:" 1 1 "cmilanf/fahclient:latest" 1 20 60 0 \
        2>&1 1>&3)
    if [ $? -eq 0 ]; then
        clear
        CMD="docker build -t $VALUE ."
        echo "Issuing command => $CMD"
        sleep 3
        /bin/bash -c $CMD
        pause
    fi
    exec 3>&-
}

docker_push () {
    clear
    chkbin az
    HEIGHT=10
    WIDTH=75
    TITLE="Push Docker image"
    BODY="Please enter the name and tag of the Docker image to push. You must have permissions into your container registry. If not, please, go back to the shell and perform a 'docker login'."
    exec 3>&1
    VALUE=$(dialog --ok-label "Push" \
	  --backtitle "$BACKTITLE" \
	  --title "$TITLE" \
	  --form "$BODY" \
        $HEIGHT $WIDTH 0 \
	    "Docker image name:" 1 1 "cmilanf/fahclient:latest" 1 20 60 0 \
        2>&1 1>&3)
    if [ $? -eq 0 ]; then
        clear
        CMD="docker push $VALUE"
        echo "Issuing command => $CMD"
        sleep 3
        /bin/bash -c $CMD 
        pause
    fi
    exec 3>&-
}

aks () {
    clear
    chkbin az
    HEIGHT=19
    WIDTH=75
    TITLE="Deploy Azure Kubernetes Service"
    BODY="We are going to Deploy Azure Kubernetes Service with GPU equiped Virtual Machines (keep close eye on Azure consumtion costs!). You need the AZ CLI and to be previously authenticated into your Microsoft Azure subscription. If not, please, exit the script and return once it is done.\n\nFill the following data and for further customization take a look 'deploy-gpu-aks.parameters.json'. You don't need to provide SSH RSA key as it is generated by the script."
    exec 3>&1
    VALUES=$(dialog --ok-label "Deploy" \
	  --backtitle "$BACKTITLE" \
	  --title "$TITLE" \
	  --form "$BODY" \
        $HEIGHT $WIDTH 5 \
	    "Subscription name or id:"  1 1 "$subscription"     1 25 45 0 \
        "Resource group name:"      2 1 "$rg"               2 25 45 0 \
        "Location:"                 3 1 "$LOCATION"         3 25 45 0 \
        "AKS cluster name:"         4 1 ""                  4 25 45 0 \
        "DNS prefix:"               5 1 ""                  5 25 45 0 \
        2>&1 1>&3)
    if [ $? -eq 0 ]; then
        clear
        CHOICES=($VALUES)
        CMD="scripts/deploy-gpu-aks.bash --subscription ${CHOICES[0]} -g ${CHOICES[1]} --location ${CHOICES[2]} --aks-cluster-name ${CHOICES[3]} --dns-prefix ${CHOICES[4]} --template-file arm/deploy-gpu-aks.json --parameters-file arm/deploy-gpu-aks.parameters.json --create-aad-sp"
        echo "Issuing command => $CMD"
        echo ''
        sleep 3
        /bin/bash -c $CMD
        pause
    fi
    exec 3>&-
}

aks_cred () {
    clear
    chkbin az
    chkbin kubectl
    HEIGHT=12
    WIDTH=75
    TITLE="Import AKS credentials into kubectl"
    BODY="Is your AKS cluster deployed? Then let's import credentials into kubectl before deploying the application. You will need AZ CLI and kubectl installed on your system."
    exec 3>&1
    VALUES=$(dialog --ok-label "Import credentials" \
	  --backtitle "$BACKTITLE" \
	  --title "$TITLE" \
	  --form "$BODY" \
        $HEIGHT $WIDTH 3 \
	    "Subscription name or id:"  1 1 "$subscription"     1 25 45 0 \
        "Resource group name:"      2 1 "$rg"               2 25 45 0 \
        "AKS name:"                 3 1 "$aksname"          3 25 45 0 \
        2>&1 1>&3)
    if [ $? -eq 0 ]; then
        clear
        CHOICES=($VALUES)
        CMD="az aks get-credentials --subscription ${CHOICES[0]} -g ${CHOICES[1]} -n ${CHOICES[2]}"
        echo "Issuing command => $CMD"
        sleep 3
        /bin/bash -c $CMD
        pause
    fi
    exec 3>&-
}

aks_clean () {
    clear
    chkbin az
    HEIGHT=14
    WIDTH=75
    TITLE="DELETE AKS and AAD SP"
    BODY="We are going to DELETE the Azure AD Service Principal and the Resource Group specified on this script. THIS ACTION IS PERMANENT. Please know what your are doing before proceeding. Note that we will be using the deploy-gpu-aks.parameters.json file to gather information needed for deletion."
    exec 3>&1
    VALUES=$(dialog --ok-label "DELETE" \
	  --backtitle "$BACKTITLE" \
	  --title "$TITLE" \
	  --form "$BODY" \
        $HEIGHT $WIDTH 3 \
	    "Subscription name or id:"  1 1 "$subscription"         1 25 45 0 \
        "Resource group name:"      2 1 "$rg"                   2 25 45 0 \
        "Write iknowwhatiamdoing:"  3 1 "$iknowwhatiamdoing"    3 25 45 0 \
        2>&1 1>&3)
    if [ $? -eq 0 ]; then
        clear
        CHOICES=($VALUES)
        if [ "${CHOICES[2]}" = "iknowwhatiamdoing" ]; then
            CMD="scripts/clean-gpu-aks.bash --subscription ${CHOICES[0]} -g ${CHOICES[1]} --parameters-file output/deploy-gpu-aks.parameters.json --iknowwhatiamdoing"
            echo "Issuing command => $CMD"
            sleep 3
            /bin/bash -c $CMD
        else
            echo "You don't know what you are doing, so I am aborting the operation."
        fi
        pause
    fi
    exec 3>&-
}

k8s_nvidia () {
    clear
    chkbin kubectl
    K8S_CONTEXT=$(kubectl config current-context)
    HEIGHT=10
    WIDTH=75
    TITLE="Install NVIDIA GPU driver into Kubernetes"
    BODY="This operation will install NVIDIA GPU drivers into your Kubernetes cluster. Check the context we are going to use for applying the manifest. If it is wrong, you have the chance to correct it."
    exec 3>&1
    VALUE=$(dialog --ok-label "Install drivers" \
	  --backtitle "$BACKTITLE" \
	  --title "$TITLE" \
	  --form "$BODY" \
        $HEIGHT $WIDTH 1 \
	    "kubectl context:"  1 1 "$K8S_CONTEXT"     1 25 45 0 \
        2>&1 1>&3)
    if [ $? -eq 0 ]; then
        clear
        CMD="kubectl config set-context $VALUE"
        echo "Issuing command => $CMD"
        sleep 3
        /bin/bash -c $CMD
        pause
        CMD="kubectl apply -f k8s/nvidia-device-plugin-ds.yaml"
        echo "Issuing command => $CMD"
        sleep 3
        /bin/bash -c $CMD
        pause
    fi
    exec 3>&-
}

k8s_fah () {
    clear
    chkbin kubectl
    chkbin sed
    K8S_CONTEXT=$(kubectl config current-context)
    HEIGHT=12
    WIDTH=75
    TITLE="Deploy Folding@home client into Kubernetes"
    BODY="This operation will deploy FAHClient into your Kubernetes cluster using the image cmilanf/fahclient. Check the context we are going to use for applying the manifest. If it is wrong, you have the chance to correct it."
    exec 3>&1
    VALUES=$(dialog --ok-label "Deploy FAHClient" \
	  --backtitle "$BACKTITLE" \
	  --title "$TITLE" \
	  --form "$BODY" \
        $HEIGHT $WIDTH 3 \
	    "kubectl context:"  1 1 "$K8S_CONTEXT"     1 25 45 0 \
        "FAH user name:"    2 1 "Anonymous"        2 25 45 0 \
        "FAH team:"         3 1 "0"                3 25 45 0 \
        2>&1 1>&3)
    if [ $? -eq 0 ]; then
        clear
        CHOICES=($VALUES)
        CMD="kubectl config set-context ${CHOICES[0]}"
        echo "Issuing command => $CMD"
        sleep 3
        /bin/bash -c $CMD
        pause
        mkdir -p output
        cp -f k8s/fah-deployment.yaml output/
        sed -i "s/value: Anonymous/value: ${CHOICES[1]}/g" output/fah-deployment.yaml
        sed -i "s/value: '0'/value: '${CHOICES[2]}'/g" output/fah-deployment.yaml
        CMD="kubectl apply -f output/fah-deployment.yaml"
        echo "Issuing command => $CMD"
        sleep 3
        /bin/bash -c $CMD
        pause
    fi
    exec 3>&-
}

aci () {
    clear
    chkbin az
    chkbin sed
    HEIGHT=14
    WIDTH=75
    TITLE="Deploy Folding@home client into ACI"
    BODY="This operation will deploy FAHClient into Azure Container Instances. At the time of writting this script, only CPU compute is supported, being GPU one in preview; so I will deploy CPU-only instances."
    exec 3>&1
    VALUES=$(dialog --ok-label "Deploy FAHClient" \
	  --backtitle "$BACKTITLE" \
	  --title "$TITLE" \
	  --form "$BODY" \
        $HEIGHT $WIDTH 5 \
	    "Subscription name or id:"  1 1 "$subscription"     1 25 45 0 \
        "Resource group name:"      2 1 "$rg"               2 25 45 0 \
        "Number of instances:"      3 1 "1"                 3 25 45 0 \
        "FAH user name:"            4 1 "Anonymous"         4 25 45 0 \
        "FAH team:"                 5 1 "0"                 5 25 45 0 \
        2>&1 1>&3)
    if [ $? -eq 0 ]; then
        clear
        CHOICES=($VALUES)
        if [ $(az group exists -g ${CHOICES[1]}) = 'false' ]; then
        	az group create -n ${CHOICES[1]} -l westeurope
        fi
        CMD="az deployment group create --subscription ${CHOICES[0]} -g ${CHOICES[1]} --template-file arm/deploy-aci.json --parameters fah-user=${CHOICES[3]} fah-team=${CHOICES[4]} count=${CHOICES[2]} --verbose"
        echo "Issuing command => $CMD"
        sleep 3
        /bin/bash -c $CMD
        pause
    fi
    exec 3>&-
}

mainmenu () {
    HEIGHT=25
    WIDTH=80
    CHOICE_HEIGHT=10
    TITLE="Main menu"
    BODY="Welcome to the Folding@home setup program, an elegant way to donate your compute capacity to scientific community and help fighting COVID-19, Cancer, Alzheimer... Join us!\n\nThis script perform the tasks needed for deploying the application into Azure Kubernetes Service with GPU support enabled or Azure Container Instances.\n\nPlease select an option:"

    OPTIONS=(DOCKER_BUILD "Build Docker image"
        DOCKER_PUSH "Push the Docker image to your repository"
        AKS "Deploy Azure Kubernetes Service with GPU and AAD SP"
        AKS_CRED "Import AKS credentials into your kubectl"
        AKS_CLEAN "Remove AKS and associated AAD SP"
        K8S_NVIDIA "Deploy NVIDIA GPU drivers for Kubernetes"
        K8S_FAH "Deploy Folding@home for Kubernetes with CPU and GPU"
        ACI "Deploy Azure Container Instances with Folding@home"
        --- "---------------------"
        EXIT "Exit the setup script")
    CHOICE=$(dialog --clear \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --menu "$BODY" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)
    if [ $? -eq 0 ]; then
        clear
        case $CHOICE in
            DOCKER_BUILD)
                docker_build
                ;;
            DOCKER_PUSH)
                docker_push
                ;;
            AKS)
                aks
                ;;
            AKS_CRED)
                aks_cred
                ;;
            AKS_CLEAN)
                aks_clean
                ;;
            K8S_NVIDIA)
                k8s_nvidia
                ;;
            K8S_FAH)
                k8s_fah
                ;;
            ACI)
                aci
                ;;
            EXIT)
                exit 0
                ;;
        esac
    else
        exit 0
    fi
}

headermsg
chkbin dialog
while [ $# -gt 0 ]
do
	case "$1" in
		-s)
			subscription="$2"
			shift 2
			;;
        -g)
			rg="$2"
			shift 2
			;;
        -l)
            LOCATION="$2"
            shift 2
            ;;
        --help)
            usagemsg
            exit 0
            ;;
		*)
			echo "Incorrect arguments or syntax fail: $1"; echo ''
			exit 1
			;;
	esac
done
sleep 1
while true; do
    mainmenu
done
